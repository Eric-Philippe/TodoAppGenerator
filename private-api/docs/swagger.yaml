basePath: /api/v1
definitions:
  auth.AuthResponse:
    properties:
      blocked:
        type: boolean
      email:
        type: string
      first_name:
        type: string
      last_connected:
        type: string
      last_name:
        type: string
      permissions:
        type: integer
      token:
        type: string
      user_id:
        type: string
    type: object
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
      remember_me:
        type: boolean
    required:
    - email
    - password
    type: object
  auth.RegisterRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  auth.RequestPasswordResetRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  auth.ResetPasswordRequest:
    properties:
      password:
        minLength: 8
        type: string
      token:
        type: string
    required:
    - password
    - token
    type: object
  models.User:
    properties:
      blocked:
        type: boolean
      email:
        type: string
      first_name:
        type: string
      has_default_password:
        type: boolean
      id:
        type: string
      last_connected:
        type: string
      last_name:
        type: string
      password:
        type: string
    type: object
  users.PasswordUpdate:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    type: object
  users.UserProfileUpdate:
    properties:
      user:
        $ref: '#/definitions/models.User'
    type: object
info:
  contact:
    email: ericphlpp@proton.me
    name: TodoGenerator Support
  description: This is the API documentation for the TodoGenerator Private API.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Swagger TodoGenerator Private API
  version: 1.0.0
paths:
  /auth/check:
    get:
      consumes:
      - application/json
      description: Check if the sent cookie token session is still valid and return
        user data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Check if the sent cookie token session is still valid and return user
        data
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: Login Credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User Login
      tags:
      - Auth
  /auth/logout:
    post:
      description: Logout a user by invalidating their token
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: User Logout
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: Registration Details
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User Register
      tags:
      - Auth
  /auth/request-reset:
    post:
      consumes:
      - application/json
      description: Send a password reset link to the user's email
      parameters:
      - description: Email Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RequestPasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Request Password Reset
      tags:
      - Auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset user password using the reset token
      parameters:
      - description: Reset Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Reset Password
      tags:
      - Auth
  /user/:
    get:
      description: Get all users that the current user has access to
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get All users that the current user has access to
      tags:
      - Users
  /user/{id}:
    delete:
      description: Delete a user by ID, if user is Staff, requires ownership permission
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Delete User
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update the profile information of the target user
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: User Profile Update with optional roles and groups
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/users.UserProfileUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Update Target User Profile
      tags:
      - Users
  /user/block/{id}:
    put:
      description: Toggle the block status of a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Toggle Block User
      tags:
      - Users
  /user/bulk:
    delete:
      consumes:
      - application/json
      description: Bulk delete users by IDs
      parameters:
      - description: User IDs
        in: body
        name: ids
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Bulk Delete Users
      tags:
      - Users
  /user/profile:
    get:
      description: Get the profile information of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get User Profile
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update the profile information of the authenticated user
      parameters:
      - description: User Profile
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Update User Profile
      tags:
      - Users
  /user/profile/password:
    put:
      consumes:
      - application/json
      description: Update the password of the current user
      parameters:
      - description: Password Update
        in: body
        name: passwords
        required: true
        schema:
          $ref: '#/definitions/users.PasswordUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Update User Password
      tags:
      - Users
  /user/resetpass/{id}:
    put:
      consumes:
      - application/json
      description: Reset the password of the target user
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Reset Target User Password
      tags:
      - Users
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
